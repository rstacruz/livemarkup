// Generated by CoffeeScript 1.6.3
(function() {
  var Reminder, ReminderView, Reminders, RemindersListView, Templates, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Reminder = (function(_super) {
    __extends(Reminder, _super);

    function Reminder() {
      _ref = Reminder.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Reminder.prototype.defaults = {
      'done': false,
      'title': ''
    };

    Reminder.prototype.toggleDone = function() {
      return this.set('done', !this.get('done'));
    };

    return Reminder;

  })(Backbone.Model);

  Reminders = (function(_super) {
    __extends(Reminders, _super);

    function Reminders() {
      _ref1 = Reminders.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Reminders.prototype.model = Reminder;

    return Reminders;

  })(Backbone.Collection);

  ReminderView = (function(_super) {
    __extends(ReminderView, _super);

    function ReminderView() {
      this.toggleDone = __bind(this.toggleDone, this);
      _ref2 = ReminderView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    ReminderView.prototype.events = {
      'click .checkbox': 'toggleDone',
      'blur input': 'unedit',
      'dblclick .show': 'edit'
    };

    ReminderView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this.model = options.model;
      return this.state = new Backbone.Model();
    };

    ReminderView.prototype.render = function() {
      this.$el.html(Templates.item);
      this.listenTo(this.state, {
        'change:editing': function() {
          var _this = this;
          return setTimeout((function() {
            return _this.$('input').focus();
          }), 0);
        }
      });
      this.template = LM(this).bind(this.model).locals({
        state: this.state
      }).render();
      return this;
    };

    ReminderView.prototype.toggleDone = function(e) {
      this.model.toggleDone();
    };

    ReminderView.prototype.edit = function() {
      return this.state.set('editing', true);
    };

    ReminderView.prototype.unedit = function() {
      return this.state.set('editing', false);
    };

    return ReminderView;

  })(Backbone.View);

  RemindersListView = (function(_super) {
    __extends(RemindersListView, _super);

    function RemindersListView() {
      _ref3 = RemindersListView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    RemindersListView.prototype.events = {
      'click .add-new-box': 'addItem'
    };

    RemindersListView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this.reminders = options.reminders;
      this.subviews = {};
      return RemindersListView.__super__.initialize.call(this);
    };

    RemindersListView.prototype.render = function() {
      this.$el.html(Templates.list);
      this.template = LM(this).locals({
        reminders: this.reminders,
        ReminderView: ReminderView
      }).render();
      return this;
    };

    RemindersListView.prototype.addItem = function() {
      var reminder;
      reminder = new Reminder();
      this.reminders.add(reminder);
      return this.editItem(reminder);
    };

    RemindersListView.prototype.editItem = function(model) {
      var _ref4;
      return (_ref4 = this.subviews[model.cid]) != null ? _ref4.edit() : void 0;
    };

    return RemindersListView;

  })(Backbone.View);

  Templates = {
    list: '<h3>\n  <span @text="on(reminders, \'add remove reset\') -> reminders.length"></span>\n  Reminders\n</h3>\n<div class=\'list\'>\n  <ul @each=\'item in -> reminders\'>\n    <li @run=\'-> view.subviews[item.cid] = new ReminderView({ el: $el, model: item }).render()\'>\n    </li>\n  </ul>\n  <div class=\'add-new-box\'>\n    Add new...\n  </div>\n</div>',
    item: '<div class=\'reminder-item\'\n  @class:done=\'attr("done")\'\n  @at:a=\'attr("done")\'\n  @class:editing=\'attr(state, "editing")\'\n>\n  <div class=\'show\' @if=\'attr(state, "editing") -> !val\'>\n    <button class=\'checkbox\'></button>\n    <strong @text=\'attr("title")\'></strong>\n  </div>\n  <div class=\'edit\' @if=\'attr(state, "editing")\'>\n    <input type="text" @value=\'attr("title")\' />\n  </div>\n</div>'
  };

  $(function() {
    var list;
    list = new Reminders([
      {
        done: false,
        title: "Do things"
      }, {
        done: true,
        title: "Work fast"
      }
    ]);
    return new RemindersListView({
      reminders: list,
      el: $('[role~="reminders"]')
    }).render();
  });

}).call(this);
